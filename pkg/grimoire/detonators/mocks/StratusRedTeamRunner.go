// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	stratus "github.com/datadog/stratus-red-team/v2/pkg/stratus"
)

// StratusRedTeamRunner is an autogenerated mock type for the Runner type
type StratusRedTeamRunner struct {
	mock.Mock
}

// CleanUp provides a mock function with given fields:
func (_m *StratusRedTeamRunner) CleanUp() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CleanUp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Detonate provides a mock function with given fields:
func (_m *StratusRedTeamRunner) Detonate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Detonate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetState provides a mock function with given fields:
func (_m *StratusRedTeamRunner) GetState() stratus.AttackTechniqueState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 stratus.AttackTechniqueState
	if rf, ok := ret.Get(0).(func() stratus.AttackTechniqueState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(stratus.AttackTechniqueState)
	}

	return r0
}

// GetUniqueExecutionId provides a mock function with given fields:
func (_m *StratusRedTeamRunner) GetUniqueExecutionId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUniqueExecutionId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Revert provides a mock function with given fields:
func (_m *StratusRedTeamRunner) Revert() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Revert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WarmUp provides a mock function with given fields:
func (_m *StratusRedTeamRunner) WarmUp() (map[string]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WarmUp")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStratusRedTeamRunner creates a new instance of StratusRedTeamRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStratusRedTeamRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *StratusRedTeamRunner {
	mock := &StratusRedTeamRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
